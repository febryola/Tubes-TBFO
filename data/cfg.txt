Start:
START

Terminals:
.
,
+
-
*
/
[
]
{
}
(
)
'
"
:
;
=
!
>
<
%
~
&
if
elif
else
for
in
is
while
continue
break
pass
class
number
return
def
with
raise
import
as
from
string
and
or
not
true
false
none
}
^
\

Groups:
name = (a-z+A-Z+\_)(a-z+A-Z+\_+0-9)*
number = (0-9)(0-9)*

Rules:
// MAIN
START -> TEXTED
TEXTED -> TEXTED TEXTED | TEXTED | TEXTED | CLASS_TEXTED | DEF_FUNC_TEXTED | ASS_OPERATION | FLOW_TEXTED | IMP_OPERATION | RAI_OP | FUNCTION | METH_TEXTED | WITH_TEXTED | PASS | STRING | LIST | DICT | VARIABLE | CONSTANT | NONE | COND_OPERATION | IF_TEXTED | ITERATE_TEXTED | COMMENT
ITERATE_TEXTED -> FOR_TEXTED | WHILE_TEXTED | LIST | DICT | VARIABLE | CONSTANT
FLOW_TEXTED -> BREAK_TEXTED | CONTINUE_TEXTED

// SYMBOLS
DOT -> .
PLUS -> +
MINUS -> -
MULTIPLY -> *
DIVISION -> /
OPEN_SQUARE_BRACKET -> [
CLOSE_SQUARE_BRACKET -> ]
OPEN_CURLY_BRACKET -> {
CLOSE_CURLY_BRACKET -> }
OPEN_NORMAL_BRACKET -> (
CLOSE_NORMAL_BRACKET -> )
SINGLE_QUOTE -> '
DOUBLE_QUOTE -> "
COLON -> :
SEMICOLON -> ;
COMMA -> ,
SPACE -> SPACE SPACE
OR_SYM -> or
BANG_SYM -> !
GT_SYM -> <
LT_SYM -> > 
EQ_SYM -> =
TILDE_SYM -> ~
PERCENT_SYM -> %
CARET_SYM -> ^
BACKSLASH -> \
REL_OP -> EQ_SYM EQ_SYM | BANG_SYM EQ_SYM | GT_SYM EQ_SYM | LT_SYM EQ_SYM | GT_SYM | LT_SYM | IS
ASS_OP -> EQ_SYM | PLUS EQ_SYM | MINUS EQ_SYM | MULTIPLY EQ_SYM | MULTIPLY MULTIPLY EQ_SYM | DIVISION EQ_SYM | DIVISION DIVISION EQ_SYM | PERCENT_SYM EQ_SYM
ART_OP -> PLUS | MINUS | MULTIPLY | MULTIPLY MULTIPLY | DIVISION | DIVISION DIVISION | PERCENT_SYM
LOG_OP -> AND | OR
MEM_OP -> IN | NOT SPACE IN
IDN_OP -> IS | IS SPACE NOT
BIT_OP -> & | OR_SYM | CARET_SYM | LT_SYM LT_SYM | GT_SYM GT_SYM | TILDE_SYM

// CONDITIONAL
IF -> if
ELIF -> elif
ELSE -> else
IF_HEADER -> IF COND_OPERATION COLON
IF_TEXTED -> IF_TEXTED ELIF_TEXTED | IF_TEXTED ELSE_TEXTED | IF_HEADER TEXTED | IF_HEADER COMMENT
ELIF_HEADER -> ELIF COND_OPERATION COLON
ELIF_TEXTED -> ELIF_TEXTED ELIF_TEXTED | ELIF_TEXTED ELSE_TEXTED | ELIF_HEADER TEXTED | ELIF_HEADER PASS
ELSE_HEADER -> ELSE COLON
ELSE_TEXTED -> ELSE_HEADER TEXTED

// CONDITIONAL IN LOOP
IF_TEXTED_LOOP -> IF_TEXTED_LOOP ELIF_TEXTED_LOOP | IF_TEXTED_LOOP ELSE_TEXTED | IF_HEADER TEXTED | IF_HEADER COMMENT | IF_HEADER BREAK | IF_HEADER CONTINUE
ELIF_TEXTED_LOOP -> ELIF_TEXTED_LOOP ELIF_TEXTED_LOOP | ELIF_TEXTED_LOOP ELSE_TEXTED | ELIF_HEADER TEXTED | ELIF_HEADER BREAK | ELIF_HEADER CONTINUE | ELIF_HEADER PASS
ELSE_TEXTED_LOOP -> ELSE_HEADER TEXTED | ELSE_HEADER BREAK | ELSE_HEADER CONTINUE

// CONDITIONAL FUNCTION
IF_TEXTED_FUNC -> IF_HEADER TEXTED_FUNC | IF_TEXTED_FUNC ELIF_TEXTED_FUNC | IF_TEXTED_FUNC ELSE_TEXTED_FUNC
ELIF_TEXTED_FUNC -> ELIF_HEADER TEXTED_FUNC | ELIF_TEXTED_FUNC ELIF_TEXTED_FUNC | ELIF_TEXTED_FUNC ELSE_TEXTED_FUNC
ELSE_TEXTED_FUNC -> ELSE_HEADER TEXTED_FUNC

// CONDITIONAL OPERATION
COND_OPERATION -> OPEN_NORMAL_BRACKET COND_OPERATION CLOSE_NORMAL_BRACKET | COND_OPERAND COND_OPERATOR COND_OPERATION | COND_OPERAND
COND_OPERATOR -> REL_OP | LOG_OP | MEM_OP | IDN_OP
COND_OPERAND -> NOT COND_OPERAND | VARIABLE | CONSTANT | ART_OPERATION | METH_TEXTED | FUNCTION | LIST | STRING | NONE | OPEN_NORMAL_BRACKET COND_OPERAND CLOSE_NORMAL_BRACKET

// LOOP FOR
FOR -> for
FOR_HEADER -> FOR FOR_VARIABLE IN ITERABLE COLON 
FOR_TEXTED -> FOR_HEADER LOOP_TEXTED
FOR_VARIABLE -> VARIABLE | VARIABLE COMMA FOR_VARIABLE
ITERABLE -> VARIABLE | FUNCTION | METH_TEXTED | DICT | STRING | LIST 
IN -> in

// LOOP TEXTED
LOOP_TEXTED -> LOOP_TEXTED LOOP_TEXTED | LOOP_TEXTED | IF_TEXTED_LOOP | FOR_TEXTED_FUNC | WHILE_TEXTED_FUNC | CONTINUE_TEXTED_FUNC | BREAK_TEXTED_FUNC | CLASS_TEXTED | DEF_FUNC_TEXTED | ASS_OPERATION | IMP_OPERATION | RAI_OP | FUNCTION | METH_TEXTED | WITH_TEXTED_FUNC | PASS | STRING | DEF_FUNC_RETURN | LIST | DICT | VARIABLE | CONSTANT | NONE | COMMENT

// LOOP FOR FUNCTION
FOR_TEXTED_FUNC -> FOR_HEADER TEXTED_FUNC

// LOOP WHILE
WHILE -> while
WHILE_HEADER -> WHILE COND_OPERATION COLON 
WHILE_TEXTED -> WHILE_HEADER LOOP_TEXTED

// LOOP WHILE FUNCTION
WHILE_TEXTED_FUNC -> WHILE_HEADER TEXTED_FUNC

// OTHER LOOP
CONTINUE -> continue 
CONTINUE_TEXTED -> ITERATE CONTINUE | ITERATE CONTINUE TEXTED
BREAK -> break 
BREAK_TEXTED -> ITERATE BREAK | ITERATE BREAK TEXTED
ITERATE -> FOR_HEADER | FOR_TEXTED | WHILE_HEADER | WHILE_TEXTED

// OTHER LOOP FUNCTION
CONTINUE_TEXTED_FUNC -> ITERATE_FUNC CONTINUE | ITERATE CONTINUE TEXTED_FUNC
BREAK_TEXTED_FUNC -> ITERATE_FUNC BREAK | ITERATE_FUNC BREAK TEXTED_FUNC
ITERATE_FUNC -> FOR_HEADER | FOR_HEADER TEXTED_FUNC | WHILE_HEADER | WHILE_HEADER TEXTED_FUNC

// PASS
PASS -> pass

// CLASS
CLASS -> class
CLASS_HEADER -> CLASS NAME COLON | CLASS NAME OPEN_NORMAL_BRACKET CLASS_PARAM CLOSE_NORMAL_BRACKET COLON 
CLASS_TEXTED -> CLASS_HEADER CLASS_BODY
CLASS_PARAM -> NAME | CLASS_PARAM COMMA CLASS_PARAM 
CLASS_BODY -> COMMENT | IF_TEXTED | ITERATE_TEXTED | CLASS_TEXTED | DEF_FUNC_TEXTED | ASS_OPERATION | FLOW_TEXTED | IMP_OPERATION | FUNCTION | METH_TEXTED | PASS | STRING | CLASS_BODY CLASS_BODY | CLASS_BODY 

// NAME
NAME -> name

// DEF
DEF -> def
DEF_FUNC_HEADER -> DEF NAME OPEN_NORMAL_BRACKET DEF_FUNC_PARAM CLOSE_NORMAL_BRACKET COLON | DEF NAME OPEN_NORMAL_BRACKET CLOSE_NORMAL_BRACKET COLON 
DEF_FUNC_TEXTED -> DEF_FUNC_HEADER DEF_FUNC_BODY
DEF_FUNC_BODY -> DEF_FUNC_BODY DEF_FUNC_BODY | TEXTED_FUNC | COMMENT
DEF_FUNC_RETURN -> RETURN ART_OPERATION | RETURN COND_OPERATION | RETURN DEF_FUNC_RETURN_VAL | RETURN
DEF_FUNC_RETURN_VAL -> METH_TEXTED | FUNCTION | VARIABLE | LIST | STRING | DICT | CONSTANT | NONE
DEF_FUNC_PARAM -> DEF_FUNC_PARAM COMMA DEF_FUNC_PARAM | NAME

// RETURN
RETURN -> return

// TEXTED
TEXTED_FUNC -> TEXTED_FUNC TEXTED_FUNC | TEXTED_FUNC | IF_TEXTED_FUNC | FOR_TEXTED_FUNC | WHILE_TEXTED_FUNC | CONTINUE_TEXTED_FUNC | BREAK_TEXTED_FUNC | CLASS_TEXTED | DEF_FUNC_TEXTED | ASS_OPERATION | IMP_OPERATION | RAI_OP | FUNCTION | METH_TEXTED | WITH_TEXTED_FUNC | PASS | STRING | DEF_FUNC_RETURN | LIST | DICT | VARIABLE | CONSTANT | NONE | COMMENT

// WITH
WITH -> with
WITH_TEXTED -> WITH_HEADER TEXTED
WITH_HEADER -> WITH WITH_ST AS VARIABLE COLON 
WITH_ST -> FUNCTION | METH_TEXTED_FUNC

// WITH FUNCTION
WITH_TEXTED_FUNC -> WITH_HEADER TEXTED_FUNC

// NUMBER
NUMBER -> PLUS NUMBER | MINUS NUMBER | NUMBER_CTN
POSITIVE_NUMBER -> PLUS POSITIVE_NUMBER | NUMBER_CTN
NUMBER_CTN -> number
CONSTANT -> OPEN_NORMAL_BRACKET CONSTANT CLOSE_NORMAL_BRACKET | CON_CTN
CON_CTN -> TRUE | FALSE | NUMBER

// VARIABEL
VARIABLE -> OPEN_NORMAL_BRACKET VARIABLE CLOSE_NORMAL_BRACKET | VAR_CTN
IDX -> VARIABLE | CONSTANT | ART_OPERATION
VAR_CTN -> NAME | NAME VAR_IDX | METH_TEXTED_NAME | METH_TEXTED_NAME VAR_IDX
VAR_IDX -> VAR_IDX VAR_IDX | OPEN_SQUARE_BRACKET IDX CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET COLON OPEN_SQUARE_BRACKET | OPEN_SQUARE_BRACKET IDX COLON CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET COLON IDX CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET IDX COLON IDX CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET COLON COLON CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET COLON COLON IDX CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET COLON IDX COLON CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET COLON IDX COLON IDX CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET IDX COLON COLON CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET IDX COLON COLON IDX CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET IDX COLON IDX COLON CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET IDX COLON IDX COLON IDX CLOSE_SQUARE_BRACKET

// STRING
STRING_TEXT -> string | AS | IMPORT | FOR | IF | RAISE | WITH | FROM | BREAK | PASS | CONTINUE | ELIF | ELSE | IN | AND | OR | TRUE | FALSE | STRING_TEXT STRING_TEXT | DOT | MINUS | PLUS | COMMA | MULTIPLY | DIVISION | COMMA | ART_OP | ASS_OP | REL_OP | OPEN_NORMAL_BRACKET | OPEN_CURLY_BRACKET | OPEN_SQUARE_BRACKET | CLOSE_CURLY_BRACKET | CLOSE_NORMAL_BRACKET | CLOSE_SQUARE_BRACKET | COLON | SEMICOLON | BACKSLASH | BANG_SYM
STRING_WITH_QUOTES -> DOUBLE_QUOTE STRING_TEXT DOUBLE_QUOTE | SINGLE_QUOTE STRING_TEXT SINGLE_QUOTE
STRING -> STRING_WITH_QUOTES VAR_IDX | STRING_WITH_QUOTES MULTIPLY POSITIVE_NUMBER | STRING_WITH_QUOTES PLUS STRING_WITH_QUOTES | STRING_WITH_QUOTES

// COMMENT
COMMENT -> DOUBLE_QUOTE DOUBLE_QUOTE DOUBLE_QUOTE STRING_TEXT DOUBLE_QUOTE DOUBLE_QUOTE DOUBLE_QUOTE | SINGLE_QUOTE SINGLE_QUOTE SINGLE_QUOTE STRING_TEXT SINGLE_QUOTE SINGLE_QUOTE SINGLE_QUOTE

// AND OR NOT
AND -> and
OR -> or
NOT -> not
IS -> is

// TRUE FALSE NONE
TRUE -> true
FALSE -> false
NONE -> none

// FUNCTION
FUNCTION -> FUNCTION_BASE | FUNCTION_BASE VAR_IDX
FUNCTION_BASE -> VARIABLE OPEN_NORMAL_BRACKET FUNCTION_PARAM CLOSE_NORMAL_BRACKET | VARIABLE OPEN_NORMAL_BRACKET CLOSE_NORMAL_BRACKET
FUNCTION_PARAM -> FUNCTION_PARAM COMMA FUNCTION_PARAM | VARIABLE | CONSTANT | STRING | LIST | DICT | NONE | FUNCTION | METH_TEXTED | ART_OPERATION | COND_OPERATION | ASS_OPERATION

// DICT
DICT -> OPEN_CURLY_BRACKET DICT_TEXTED CLOSE_CURLY_BRACKET | OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET
DICT_TEXTED -> DICT_TYPE COMMA DICT_TYPE | DICT_TYPE
DICT_TYPE -> DICT_TYPES COLON DICT_TYPES
DICT_TYPES -> VARIABLE | CONSTANT | STRING | FUNCTION | METH_TEXTED | NONE

// LIST
LIST -> OPEN_SQUARE_BRACKET LIST_TEXTED CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET CLOSE_SQUARE_BRACKET
LIST_TYPE -> VARIABLE | CONSTANT | STRING | FUNCTION | METH_TEXTED | LIST | DICT | NONE
LIST_TEXTED -> LIST_TYPE | LIST_TEXTED COMMA LIST_TYPE | LIST_TYPE FOR VARIABLE IN FUNCTION

// ASSIGNMENT OPERATION
ASS_DESTRUCTURE -> VARIABLE COMMA VARIABLE | ASS_DESTRUCTURE COMMA VARIABLE
ASS_OPERATION -> VARIABLE ASS_OPERATOR ASS_OPERAND | ASS_DESTRUCTURE ASS_OPERATOR ASS_OPERAND
ASS_OPERATOR -> ASS_OP
ASS_OPERAND -> OPEN_NORMAL_BRACKET ASS_OPERAND CLOSE_NORMAL_BRACKET | VARIABLE | CONSTANT | COND_OPERATION | ART_OPERATION | METH_TEXTED | FUNCTION | LIST | STRING | DICT | NONE

// ARITHMETIC OPERATION
ART_OPERATION -> OPEN_NORMAL_BRACKET ART_OPERATION CLOSE_NORMAL_BRACKET | ART_OPERATION ART_OPERATOR ART_OPERATION | ART_OPERAND
ART_OPERATOR -> ART_OP | BIT_OP
ART_OPERAND -> VARIABLE | CONSTANT | METH_TEXTED | FUNCTION

// RAISE
RAISE -> raise
RAI_OP -> RAISE RAI_BODY
RAI_BODY -> OPEN_NORMAL_BRACKET RAI_BODY CLOSE_NORMAL_BRACKET | VARIABLE | CONSTANT | COND_OPERATION | ART_OPERATION | METH_TEXTED | FUNCTION | LIST | STRING | DICT | NONE

// IMPORT
IMP_OPERATION -> FROM IMP_TEXTED IMPORT IMPT_MOD | IMPORT IMP_TEXTED | IMPORT AS_BLOCK
AS_BLOCK -> AS_BLOCK COMMA AS_BLOCK | IMP_TEXTED AS NAME
IMP_TEXTED -> IMP_TEXTED DOT IMP_TEXTED | NAME
IMPT_MOD -> NAME | ALL | AS_BLOCK | IMPT_MOD COMMA IMPT_MOD
ALL -> *
AS -> as
IMPORT -> import
FROM -> from

// METHOD
METH_TEXTED -> METH_INIT DOT METH_TEXTED | METH_BACK_FUNC | METH_BACK_NAME
METH_TEXTED_NAME -> METH_INIT DOT METH_TEXTED_NAME | METH_BACK_NAME
METH_TEXTED_FUNC -> METH_INIT DOT METH_TEXTED_FUNC | METH_BACK_FUNC
METH_INIT -> OPEN_NORMAL_BRACKET METH_INIT CLOSE_NORMAL_BRACKET | METH_BACK_FUNC | METH_BACK_NAME
METH_BACK_FUNC -> FUNCTION | FUNCTION VAR_IDX
METH_BACK_NAME -> NAME | NAME VAR_IDX
